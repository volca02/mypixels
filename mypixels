#!/usr/bin/env python3
""" mypixels - A low clutter, python-gtk based terminal emulator.
"""

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Glued together in free time by Filip Volejnik: f.volejnik at google mail
# heavily inspired by uzbl-tabbed.py
# Solarized colors are a great piece of work of Ethan Schoonover
# TODO: Timer for tablist updates - optionally set to refresh if using some dynamic status
# TODO: Write to buffer - a small box floating somewhere that'll display what user's writing (in parallel with the console).
# TODO: Tagging of consoles - and grouping via those tags (partially done with tab coloring)

import gi
from gi import pygtkcompat
gi.require_version('Vte', '2.91')
# pygtkcompat.enable()
# pygtkcompat.enable_gtk(version='3.0')
import gobject
from gi.repository import Vte, GLib, Gtk, Gdk, Pango, Gio
#import vte
#import pango
import types
import yaml
import os.path
import sys
import html
import traceback

def clock():
    from time import localtime, strftime
    return "<span foreground = '#966'>%s</span> " % strftime("%H:%M", localtime())

callables = {
    'clock' : clock
    }

max_groups = 8

# Default config
config = {
    'tablist_background': "#303030", # Tablist background
    
    'focus_new_tabs': True,
    'tab_prepend': 'clock', # name of callback function that generates pango markup text appended to tab list before the tabs
    'tab_append': None,  # the same, but appended after tab list
    'tab_format': '<span %(color)s>%(tcorner)s%(entangled)s%(tname)s]</span>', # tid Tab id (unique), tname - tab name, tidx - tab index (from 1 on the left)
    'tab_shorten_str': '\xe2\x80\xa6',
    'tab_color_bg': '#303030',
    'tab_color_bg_selected': '#505020',
    'tab_color_fg': '#888',
    'tab_color_fg_selected': '#fff',
    'tab_color_entangle': '#f00',
    'tab_color_idx': '#808',
    'tablist_font': 'Liberation Mono 7',
    'term_font': 'Terminus 8',
    'default_tab_title': '',
    'scrollback_lines': 1000,
    'term_opacity': 0.1,
    'bg_tint_color': '#140008',
    'foreground_color': '#BBB',
    'background_color': '#000',
    'hide_single_tab': False,
    'tablist_top': True,
    'tab_title_max_length': 16, # -1 to disable this
    'tab_title_short_current': 32, # shorten the selected tab title (False - don't, True - do, int > 0 current title max length)
    'tab_title_shorten_start': False, # shorten so that end of the text is visible, not start
    'tablist_hide': False,
    'default_width': 640,
    'default_height': 480,

    'wal_palette': '~/.cache/wal/colors.yml',

    'palette': '',

    # choosable tab colors (grouping)
    'col_0': '#b58900',
    'col_1': '#cb4b16',
    'col_2': '#dc322f',
    'col_3': '#d33682',
    'col_4': '#6c71c4',
    'col_5': '#268bd2',
    'col_6': '#2aa198',
    'col_7': '#859900',

    'tab_highlight_mod': 'Alt_L',

    'add_button_color': '#FFA500', # Default color for the add new tab button

    'bindings': {
        'move_prev_tab' : 'MOD1+SHIFT+Left',
        'move_next_tab' : 'MOD1+SHIFT+Right',
        'move_first_tab': 'MOD1+SHIFT+Home',
        'move_last_tab' : 'MOD1+SHIFT+End',

        'prev_tab': ('MOD1+Left', 'MOD1+SHIFT+f'),
        'next_tab': ('MOD1+Right', 'MOD1+SHIFT+b'),
        'first_tab': 'MOD1+Home',
        'last_tab': 'MOD1+End',

        'close_tab': ('CONTROL+ALT+x', 'CONTROL+ALT+q'),
        'new_tab': ('CONTROL+ALT+z', 'CONTROL+SHIFT+t'),

        'shrink_font': 'MOD1+SHIFT+KP_Subtract',
        'enlarge_font': 'MOD1+SHIFT+KP_Add',

        'toggle_hide_tabs': 'CONTROL+SHIFT+v',

        'prev_color': 'MOD1+SHIFT+braceleft',
        'next_color': 'MOD1+SHIFT+braceright',

        'toggle_entangle': 'MOD1+SHIFT+KP_Multiply',

        'rename_tab': 'MOD1+SHIFT+n',

        'show_search': 'MOD1+SHIFT+s',

        'search_prev': 'MOD1+SHIFT+a',
        'search_next': 'MOD1+SHIFT+d',

        'font_selector': 'CONTROL+SHIFT+f',

        'config_reload': 'CONTROL+SHIFT+r',

        'goto_tab_0': 'MOD1+_1',
        'goto_tab_1': 'MOD1+_2',
        'goto_tab_2': 'MOD1+_3',
        'goto_tab_3': 'MOD1+_4',
        'goto_tab_4': 'MOD1+_5',
        'goto_tab_5': 'MOD1+_6',
        'goto_tab_6': 'MOD1+_7',
        'goto_tab_7': 'MOD1+_8',
        'goto_tab_8': 'MOD1+_9',
        'goto_tab_9': 'MOD1+_0'
    }
};

# Used for quick selection via <Mod1>[0-9]
num2key = (
    Gdk.KEY_1,
    Gdk.KEY_2,
    Gdk.KEY_3,
    Gdk.KEY_4,
    Gdk.KEY_5,
    Gdk.KEY_6,
    Gdk.KEY_7,
    Gdk.KEY_8,
    Gdk.KEY_9,
    Gdk.KEY_0,
    );

str2mod = {
    'mod1':  Gdk.ModifierType.MOD1_MASK,
    'alt':  Gdk.ModifierType.MOD1_MASK,
    'shift': Gdk.ModifierType.SHIFT_MASK,
    'control': Gdk.ModifierType.CONTROL_MASK,
    'ctrl': Gdk.ModifierType.CONTROL_MASK
}
# parses mod+mod+key
def key_press_parse(bindstr):
    key = None
    mods = 0

    for kp in bindstr.split('+'):
        kl = kp.lower()
        if kl in str2mod:
            mods = mods | str2mod[kl]
        else:
            if not key:
                key = Gdk.keyval_from_name(kp)
            else:
                print("Parse error: '%s' - part '%s', state %s, %s" % (bindstr, kp, str(key), str(mods)))

    return (mods, key)

def parse_rgba(color):
    col = Gdk.RGBA()
    col.parse(color)
    return col

def brighten(strcolor, amount = 1.2):
    col = parse_rgba(strcolor)
    return '#{:02x}{:02x}{:02x}'.format(min(255, int(255 * col.red * amount)),
                                        min(255, int(255 * col.green * amount)),
                                        min(255, int(255 * col.blue * amount)))

# parses key_combo=call(arg)
def key_bind_parse(bindstr):
    pass

# stolen from Terminator https://github.com/m45t3r/t3rminator/blob/master/terminatorlib/terminator.py
def eventkey2gdkevent(eventkey):  # FIXME FOR GTK3: is there a simpler way of casting from specific EventKey to generic (union) GdkEvent?
    gdkevent = Gdk.Event(eventkey.type)
    gdkevent.key.type = eventkey.type
    gdkevent.key.window = eventkey.window
    gdkevent.key.send_event = eventkey.send_event
    gdkevent.key.time = eventkey.time
    gdkevent.key.state = eventkey.state
    gdkevent.key.keyval = eventkey.keyval
    gdkevent.key.length = eventkey.length
    gdkevent.key.string = eventkey.string
    gdkevent.key.hardware_keycode = eventkey.hardware_keycode
    gdkevent.key.group = eventkey.group
    gdkevent.key.is_modifier = eventkey.is_modifier
    return gdkevent

def counter():
    """ Tab ID generator """
    i = 1
    while True:
        yield i
        i += 1

def dialog_get_text(parent, message, default=''):
    """
    Display a dialog with a text entry.
    Returns the text, or None if canceled.
    """
    d = Gtk.MessageDialog(transient_for=parent,
                          modal=True,
                          destroy_with_parent=True,
                          message_type=Gtk.MessageType.QUESTION,
                          buttons=Gtk.ButtonsType.OK_CANCEL,
                          text=message)
    entry = Gtk.Entry()
    entry.set_text(default)
    entry.show()
    d.vbox.pack_end(entry, False, False, 0)
    entry.connect('activate', lambda _: d.response(Gtk.ResponseType.OK))
    d.set_default_response(Gtk.ResponseType.OK)

    r = d.run()
    text = entry.get_text()
    d.destroy()
    if r == Gtk.ResponseType.OK:
        return text
    else:
        return None

class MyPixels:
    def __init__(self):
        # counter used for tab id's
        self.counter = counter()

        # entangled terms for multi term keyboard events
        self.entangled = []

        # create a window to hold the thing
        self.window = Gtk.Window()
        self.window.set_title("mypixels")
        self.window.set_border_width(0)

        self.window.connect("delete-event", self.quit_request)

        self.keybinds = []
        self.keymap = {}
        self.on_tabswitch = False

        # default font size - zero is ignored
        self.fontsize = 0

        # handle config
        self.load_config()

        self.overlay = Gtk.Overlay()
        self.window.add(self.overlay)
        self.overlay.show()

        vbox = Gtk.VBox()
        self.vbox = vbox
        # self.vbox.set_resize_mode(Gtk.RESIZE_IMMEDIATE)
        self.overlay.add(vbox)

        ebox = Gtk.EventBox()
        self.ebox = ebox

        self.ebox.set_name("tabbar")

        self.tab_container = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        self.tab_container.set_halign(Gtk.Align.START)
        self.tab_container.set_valign(Gtk.Align.START)
        self.tab_container.show()

        ebox.add(self.tab_container)
        ebox.show()

        # gtk notebook that holds the vterms
        self.notebook = Gtk.Notebook()
        self.notebook.set_show_tabs(False)

        self.notebook.set_show_border(False)
        self.notebook.set_scrollable(True)
        self.notebook.set_border_width(0)

        self.notebook.connect("page-removed", self.tab_closed)
        self.notebook.connect("switch-page", self.tab_changed)
        self.notebook.connect("page-added", self.tab_opened)
        self.notebook.connect("page-reordered", self.tab_reordered)

        vbox.pack_start(self.notebook, True, True, 0)
        vbox.pack_start(self.ebox, False, False, 0)

        if config["tablist_top"]:
            vbox.reorder_child(self.ebox, 0)
            vbox.reorder_child(self.notebook, 1)
        else:
            vbox.reorder_child(self.notebook, 1)
            vbox.reorder_child(self.ebox, 2)

        self.notebook.show()

        self.window.connect("key-press-event", self.key_pressed)
        self.window.connect("key-release-event", self.key_released)
        self.window.connect("configure-event", self.resize_request)

        # window fixup before we create tab
        self.window.resize(config["default_width"], config["default_height"])

        # searchbox, if it updates, we update the vtk search
        self.search_entry = Gtk.Entry()

        self.search_entry.set_margin_start(5);
        self.search_entry.set_margin_end(5);
        self.search_entry.set_margin_top(5);
        self.search_entry.set_margin_bottom(5);
        self.search_entry.set_halign(Gtk.Align.START);
        self.search_entry.set_valign(Gtk.Align.END);
        self.search_entry.connect("key-press-event", self.search_key_pressed)
        self.search_entry.connect("focus-out-event", self.search_lose_focus)

        self.overlay.add_overlay(self.search_entry)

        self.vbox.show()
        self.window.show()

        self.notebook.grab_focus()

        self.forcedHideTabs = config['tablist_hide']

        # try re-applying the configuration
        self.apply_config()

        self.tabs = {}

    def transform_keybinds(self):
        # transforms self.keymap ("function->binds") to self.keybinds
        for fn, bind in self.keymap.items():
            func = self.funcmap[fn]
            if isinstance(bind, list) or isinstance(bind, tuple):
                for b in bind:
                   (mods, key) = key_press_parse(b)
                   self.keybinds.append((key, mods, func[0], func[1]))
            else:
                (mods, key) = key_press_parse(bind)
                self.keybinds.append((key, mods, func[0], func[1]))

    def set_funcmap(self):
        self.funcmap = {
            'move_prev_tab':  (self.move_prev_tab, None),
            'move_next_tab':  (self.move_next_tab, None),
            'move_first_tab': (self.move_prev_tab, -1),
            'move_last_tab':  (self.move_next_tab, -1),

            'prev_tab': (self.prev_tab, None),
            'next_tab': (self.next_tab, None),
            'first_tab': (self.prev_tab, -1),
            'last_tab': (self.next_tab, -1),

            'close_tab': (self.close_tab, None),
            'new_tab': (self.new_tab, None),

            'shrink_font': (self.shrink_font, None),
            'enlarge_font': (self.enlarge_font, None),

            'toggle_hide_tabs': (self.toggle_hide_tabs, None),

            'prev_color': (self.switch_group, -1),
            'next_color': (self.switch_group,  1),

            'toggle_entangle': (self.toggle_entangle, None),

            'rename_tab': (self.rename_tab, None),

            'show_search': (self.show_search, None),

            'search_prev': (self.search_advance, False),
            'search_next': (self.search_advance, True),

            'font_selector': (self.font_selector, True),

            'config_reload': (self.reload_config, None)
        }

        for i in range(0, 10):
            self.funcmap['goto_tab_' + str(i)] = (self.goto_tab, i);

    def write_config(self):
        with open(os.path.expanduser('~/.mypixels'), 'w') as f:
            yaml.dump(config, f, default_flow_style=False)

    def resize_request(self, wnd, event):
        self.update_tablist()

    def key_pressed(self, wnd, event):
        if event.type == Gdk.EventType.KEY_PRESS:
            # skim through the bindings
            mods = event.state & Gtk.accelerator_get_default_mod_mask()
            keyval = Gdk.keyval_to_lower(event.keyval)

            # TODO: Could accelerate this by placing the key combination into a dict
            for bind in self.keybinds:
                if (bind[0] == keyval) and (bind[1] == mods):
                    bind[2](bind[3])
                    return True
            if (keyval == self.on_tabswitch_key):
                self.on_tabswitch = True
                self.update_tablist()

        # tangled terminals? if so, propagate
        tabn = self.notebook.get_current_page()
        tab = self.notebook.get_nth_page(tabn)

        if (tab in self.entangled):
            for term in self.entangled:
                term.emit("key-press-event", eventkey2gdkevent(event))
            return True

        return False

    def key_released(self, wnd, event):
        tabn = self.notebook.get_current_page()
        tab = self.notebook.get_nth_page(tabn)

        if (event.type == Gdk.EventType.KEY_RELEASE):
            mods = event.state & Gtk.accelerator_get_default_mod_mask()
            keyval = Gdk.keyval_to_lower(event.keyval)
            if (keyval == self.on_tabswitch_key):
                self.on_tabswitch = False
                self.update_tablist()

        if (tab in self.entangled):
            for term in self.entangled:
                term.emit("key-release-event", eventkey2gdkevent(event))
            return True
        return False

    def enlarge_font(self, param):
        self.zoom(True)

    def shrink_font(self, param):
        self.zoom(False)

    def on_scroll(self, widget, event):
        # Handles zoom in / zoom out on Ctrl+mouse wheel
        accel_mask = Gtk.accelerator_get_default_mod_mask()
        if event.state & accel_mask == Gdk.ModifierType.CONTROL_MASK:
            direction = event.get_scroll_deltas()[2]
        if direction > 0:  # scrolling down -> zoom out
            self.zoom(False)
        else:
            self.zoom(True)

    def zoom(self, zoom):
        for idx, tab in enumerate(self.notebook):
            pangodesc = tab.get_font()
            fontsize = pangodesc.get_size()

            if fontsize > Pango.SCALE and not zoom:
                fontsize -= Pango.SCALE
            elif zoom:
                fontsize += Pango.SCALE

            pangodesc.set_size(fontsize)
            self.fontsize=fontsize
            tab.set_font(pangodesc)


    def new_tab(self, command=None, tnext=False, title="", cmd=None):
        # new tab instance
        tab = Vte.Terminal()
        tab.connect("child-exited", self.child_exited)
        tab.connect("eof", self.child_eof)
        tab.connect("window-title-changed", self.window_title_changed)
        tab.connect("scroll-event", self.on_scroll)
#        tab.connect("key-press-event", self.key_pressed)
#        tab.connect("key-release-event", self.key_released)

        tab.set_font(Pango.FontDescription(config["term_font"]))
        tab.set_scrollback_lines(config['scrollback_lines'])
        tab.search_set_wrap_around(True)

        tab.set_word_char_exceptions("-A-Za-z0-9,./?%&#:_~")
        self.apply_tab_colors(tab)

        tid = self.counter.__next__()

        if self.fontsize:
            pangodesc = tab.get_font()
            pangodesc.set_size(self.fontsize)
            tab.set_font(pangodesc)

        # The empty argv list is a fix for zsh segv...
        command=[Vte.get_user_shell()]
        if (cmd):
            command = cmd
        elif (self.command):
            command=self.command

        tab.spawn_async(
            Vte.PtyFlags.DEFAULT,
            os.environ['HOME'],
            command,
            [],
            GLib.SpawnFlags.DEFAULT,
            None,   # child_setup
            None,   # child_setup_data
            -1,     # timeout (no timeout)
            None,   # cancellable
            None,   # callback (optional)
            None    # user_data (optional)
        )

        tab.show()

#        if (command):
#            tab.feed_child(command)

        self.notebook.insert_page(tab, None, tnext and self.notebook.get_current_page() + 1 or -1)
        self.notebook.set_tab_reorderable(tab, True)

        if not title:
            title = config["default_tab_title"]

        self.tabs[tab] = {"title": title, "id": tid}
        self.update_tablist()

        tab.grab_focus()

    def update_tablist(self):
        # Clear existing tabs
        for child in self.tab_container.get_children():
            self.tab_container.remove(child)

        if (self.notebook.get_n_pages() <= 1 and config["hide_single_tab"])             or self.forcedHideTabs:
            self.ebox.hide()
            return

        self.ebox.show()

        if (config['tab_prepend']):
            prepend_label = Gtk.Label()
            prepend_label.set_use_markup(True)
            prepend_label.set_markup(callables[config['tab_prepend']]())
            self.tab_container.pack_start(prepend_label, False, False, 0)
            prepend_label.show()

        # Add the [+] button
        add_tab_event_box = Gtk.EventBox()
        add_tab_event_box.set_name("add-tab-button")
        add_tab_event_box.set_events(Gdk.EventMask.BUTTON_PRESS_MASK)
        add_tab_event_box.connect("button-press-event", self.on_add_tab_clicked)
        add_tab_event_box.set_tooltip_text("Create a new tab")

        add_tab_label = Gtk.Label()
        add_tab_label.set_markup("[+]")
        add_tab_label.set_margin_top(2)
        add_tab_label.set_margin_bottom(2)
        add_tab_label.get_style_context().add_class("tab-label") # Use existing tab-label style

        add_tab_event_box.add(add_tab_label)
        add_tab_event_box.show_all()
        self.tab_container.pack_start(add_tab_event_box, False, False, 0)

        curidx = self.notebook.get_current_page()

        tab_format = config['tab_format']
        max_title_len = config['tab_title_max_length']
        tabl_short = config['tab_shorten_str']

        for idx, tab in enumerate(self.notebook):
            colfg = config["tab_color_fg"]
            colbg = config["tab_color_bg"]

            tid = idx + 1
            tidx = "<span foreground=\"%s\">%d</span>" % (config["tab_color_idx"], tid)
            tname = ""

            tcorner = "["
            if (self.on_tabswitch):
                tcorner = tidx

            if tab in self.tabs:
                params = self.tabs[tab]
                tid = params["id"]
                tname = params["title"]
                if "name" in params:
                    tname = params["name"]

            if not tname:
                tname = str(tid)

            if (idx != curidx):
                if max_title_len > 0 and len(tname) > max_title_len:
                    if config['tab_title_shorten_start']:
                        tname = tabl_short + tname[len(tname)-max_title_len:]
                    else:
                        tname = tname[:max_title_len] + tabl_short
            else:
                colfg = config["tab_color_fg_selected"]
                colbg = config["tab_color_bg_selected"]

                cname = '_selected'
                mt_cur = max_title_len
                sh_cur = config['tab_title_short_current']

                if (type(sh_cur) is int):
                    mt_cur = sh_cur
                    sh_cur = True

                if sh_cur and mt_cur > 0 and len(tname) > mt_cur:
                   if config['tab_title_shorten_start']:
                       #   
                       tname = tabl_short + tname[len(tname) - mt_cur:]
                   else:
                       tname = tname[:mt_cur] + tabl_short

            # now if we have group set for the tab, override
            if tab in self.tabs:
                grp = self.tabs[tab].get("group", None)
            else:
                grp = None

            if tab in self.entangled:
                entangled = "<span foreground=\"%s\">*</span>" % (config["tab_color_entangle"])
            else:
                entangled = ""

            if grp:
                colfg = config["col_%d" % grp]

            color = "foreground=\"%s\" background=\"%s\"" % (colfg, colbg)

            # fixup title - dangerous chars
            tname = html.escape(tname)

            # Create a new EventBox for each tab
            tab_event_box = Gtk.EventBox()
            tab_event_box.set_name(f"tab-{idx}") # Set a name for CSS styling
            tab_event_box.set_events(Gdk.EventMask.BUTTON_PRESS_MASK)
            tab_event_box.connect("button-press-event", self.on_tab_clicked, idx)

            tab_label = Gtk.Label()
            tab_label.set_use_markup(True)
            tab_label.set_justify(Gtk.Justification.LEFT)
            tab_label.set_line_wrap(False)
            tab_label.set_selectable(False)
            tab_label.set_margin_top(2)
            tab_label.set_margin_bottom(2)
            tab_label.set_halign(Gtk.Align.START)
            tab_label.set_valign(Gtk.Align.START)
            tab_label.set_ellipsize(Pango.EllipsizeMode.END)
            tab_label.get_style_context().add_class("tab-label")

            pango_markup = tab_format % locals()
            tab_label.set_markup(pango_markup)

            tab_event_box.add(tab_label)
            tab_event_box.show_all()
            self.tab_container.pack_start(tab_event_box, False, False, 0)

        

    def on_tab_clicked(self, widget, event, tab_index):
        if event.button == 1:  # Left mouse button
            self.goto_tab(tab_index)

    def on_add_tab_clicked(self, widget, event):
        if event.button == 1:  # Left mouse button
            self.new_tab()


    def next_tab(self, skip=1, move=False):
        """ Focuses next tab. If skip is negative, focuses last tab.
        If move is true, moves the tab to the place (otherwise it just focuses)
        """
        if not skip:
            skip = 1

        ntabs = self.notebook.get_n_pages()

        if (ntabs <= 0):
            return

        if skip < 0:
            tabn = ntabs - 1
        else:
            tabn = (self.notebook.get_current_page() + skip) % ntabs

        self.goto_tab(tabn, move)

    def prev_tab(self, skip=1, move=False):
        """ Focuses previous tab. If skip is negative, focuses first tab.
        If move is true, moves the tab to the place (otherwise it just focuses)
        """
        if not skip:
            skip = 1

        ntabs = self.notebook.get_n_pages()

        if (ntabs <= 0):
            return

        if skip < 0:
            tabn = 0
        else:
            tabn = (self.notebook.get_current_page() - skip) % ntabs

        while (tabn < 0):
            tabn += ntabs

        self.goto_tab(tabn, move)

    def move_next_tab(self, skip=1):
        """ Like next_tab, but moves the current tab to the place """
        self.next_tab(skip, move=True)

    def move_prev_tab(self, skip=1):
        """ Like next_tab, but moves the current tab to the place """
        self.prev_tab(skip, move=True)

    def move_first_tab(self, arg=None):
        self.prev_tab(-1, move=True)

    def move_last_tab(self, arg=None):
        self.next_tab(-1, move=True)

    def highlight_tabs(self, toggle):
        pass

    def goto_tab(self, tabn, move=False):
        if move:
            idx = self.notebook.get_current_page()
            tab = self.notebook.get_nth_page(idx)
            self.notebook.reorder_child(tab, tabn)

        self.notebook.set_current_page(tabn)
        self.update_tablist()

    def toggle_entangle(self, ignored):
        tab = self.get_current_tab()

        if tab in self.entangled:
            self.entangled = filter(lambda t: t != tab, self.entangled)
        else:
            self.entangled.append(tab)

        self.update_tablist()

    def toggle_hide_tabs(self, tabn=None):
        self.forcedHideTabs = not self.forcedHideTabs
        self.update_tablist()

    def close_tab(self, tabn=None):
        # TODO: What if this ended when not a current page?
        if not tabn:
            tabn = self.notebook.get_current_page()
        if (tabn >= 0):
            self.notebook.remove_page(tabn)

    def rename_tab(self, tabn=None):
        if not tabn:
            tabn = self.notebook.get_current_page()

        tab = self.notebook.get_nth_page(tabn)
        name = dialog_get_text(
            self.window, "Tab name", self.tabs[tab].get('name', ''))
        if name:
            self.tabs[tab]['name'] = name
            self.update_tablist()

    def tab_closed(self, notebook, tab, index):
        del self.tabs[tab]
        if (self.notebook.get_n_pages() == 0):
            self.quit_request()
        else:
            tabn = self.notebook.get_current_page()
            # refocus
            self.notebook.set_current_page(tabn)

        self.update_tablist()


    def child_exited(self, term, status):
        for idx, tab in enumerate(self.notebook):
            if tab == term:
                self.notebook.remove_page(idx)
        self.update_tablist()

    def child_eof(self, a=None, b=None):
        pass

    def window_title_changed(self, term):
        self.tabs[term]['title'] = term.get_property("window-title")
        self.update_tablist()

    def tab_opened(self, notebook, tab, index):
        if config["focus_new_tabs"]:
            self.notebook.set_focus_child(tab)
            self.notebook.set_current_page(index)
        else:
            oldindex = self.notebook.get_current_page()

            if oldindex < 0:
                oldindex = index

            oldtab = self.notebook.get_nth_page(oldindex)
            self.notebook.set_focus_child(oldtab)
            self.notebook.set_current_page(oldindex)

    def tab_changed(self, notebook, tab, index):
        self.update_tablist()

    def tab_reordered(self, notebook, tab, index):
        self.update_tablist()

    def switch_group(self, skip):
        tabn = self.notebook.get_current_page()
        tab = self.notebook.get_nth_page(tabn)

        params = self.tabs.setdefault(tab, {})

        grp = params.setdefault("group", 0) + skip

        # if the group goes beyond 0 or max
        if grp < 0:
            grp = max_groups - 1

        if grp >= max_groups:
            grp = 0

        # if the group is zero, remove the def
        # otherwise replace
        if grp == 0:
            del params["group"]
        else:
            params["group"] = grp

        # update tab view
        self.update_tablist()

    def show_search(self, param=None):
        self.search_entry.show()
        self.search_entry.grab_focus()

    def hide_search(self, param=None):
        self.search_entry.hide()

    def search_advance(self, forward=True):
        tab = self.get_current_tab()
        if (forward):
            tab.search_find_next()
        else:
            tab.search_find_previous()

    def font_selector(self, param=None):
        font_chooser = Gtk.FontSelectionDialog("Terminal font", self.window)
        font_chooser.set_font_name(config["term_font"])
        res = font_chooser.run()

        if res == Gtk.ResponseType.OK:
            fname = font_chooser.get_font_name()
            font_desc = Pango.FontDescription(fname)
            if font_desc:
                config["term_font"] = fname
                for tab in self.tabs:
                    tab.set_font(font_desc)

        font_chooser.destroy()

    def get_current_tab(self):
        tabn = self.notebook.get_current_page()
        return self.notebook.get_nth_page(tabn)

    def search_lose_focus(self, wnd, event):
        self.hide_search()
        # re-focus current tab
        self.get_current_tab().grab_focus()

    def search_key_pressed(self, wnd, event):
        if event.type == Gdk.KEY_PRESS:
            if (event.keyval == Gdk.KEY_Escape):
                self.hide_search()
                return False
            if (event.keyval == Gdk.KEY_Return):
                self.update_search_term(self.search_entry.get_text())
                self.hide_search()
                self.search_advance(True)
                return False
        return False

    def update_search_term(self, text):
        tab = self.get_current_tab()
        regex = GLib.Regex(text, 0, 0)
        tab.search_set_gregex(regex, 0)

    def run(self):
        # first initial tab
        self.command = None

        # is there any command on the cmdline?
        if (len(sys.argv) > 1):
                self.command=sys.argv[1:]

        self.new_tab()
        Gtk.main()

    def quit_request(self, *args):
        # if there is more than one tab, ask
        if (self.notebook.get_n_pages() > 1):
            # ask first
            dialog = Gtk.MessageDialog(transient_for=self.window,
                                       modal=True, destroy_with_parent=True,
                                       message_type=Gtk.MessageType.INFO,
                                       buttons=Gtk.ButtonsType.YES_NO,
                                       text="Do you really want to close?")

            rv = dialog.run()
            dialog.destroy()

            if rv != Gtk.ResponseType.YES:
                return True # cancel the quit

        # TODO: Cleanup
        Gtk.main_quit()

    def load_config(self):
        try:
            with open(os.path.expanduser("~/.mypixels")) as f:
                myconfig = yaml.load(f, Loader=yaml.FullLoader)

            try:
                for k in config.keys():
                    # if this is a keymap, descend
                    if k == "bindings":
                        if "bindings" in myconfig:
                            for fn, b in myconfig['bindings'].items():
                                config[k][fn] = b
                    else:
                        if k in myconfig:
                            config[k] = myconfig[k]
            except Exception as e:
                print("Config parse error: " % str(e))
                pass
        except:
            pass
            # if no config is found, write the default mappings into the config
            #self.write_config()

        # try to override the colors from wal palette if that is set to be used
        self.load_wal_palette()

    def apply_tab_colors(self, tab):
        bg_color = Gdk.RGBA()
        bg_color.parse(config['bg_tint_color'])
        bg_color.alpha=1.0-config['term_opacity']
        tab.set_color_background(bg_color)
        if self.palette:
            tab.set_colors(self.fg_color, self.bg_color, self.palette)

    def apply_config(self):
        # higlights tab nums on press
        self.on_tabswitch_key = key_press_parse(config["tab_highlight_mod"])[1]

        # parse the config key bindings
        self.set_funcmap()
        self.keymap = config['bindings']
        self.transform_keybinds()

        # convert the call config vars to callables
        if 'palette' in config:
            colors = config['palette'].split(':')
            self.palette = []
            for color in colors:
                if color:
                    self.palette.append(parse_rgba(color))
        else:
            self.palette = None

        self.fg_color = parse_rgba(config['foreground_color'])
        self.bg_color = parse_rgba(config['background_color'])

        

        fontdesc = Pango.FontDescription(config["tablist_font"])
        font_size_in_pt = fontdesc.get_size() / Pango.SCALE

        bgcolor = config['tablist_background']
        # TODO: self.ebox.modify_bg(Gtk.STATE_NORMAL, bgcolor)

        css = f"""
        #tabbar {{
            background-color: {bgcolor};
        }}
        #tabbar GtkEventBox {{ /* Style for individual tab containers */
            padding: 2px 8px; /* Add some padding for visual separation */
            margin-right: 1px; /* Space between tabs */
        }}
        #tabbar .tab-label {{ /* Style for the text within tabs */
            font-family: "{fontdesc.get_family()}";
            font-size: {font_size_in_pt}pt;
        }}
        #tabbar #add-tab-button {{ /* Style for the add tab button */
            background-color: {brighten(bgcolor, 1.1)}; /* Slightly brighter background for the button */
            padding: 2px 8px;
            margin-right: 1px;
        }}
        #tabbar #add-tab-button .tab-label {{ /* Style for the text within the add tab button */
            color: {config['add_button_color']};
        }}
        """

        style_provider = Gtk.CssProvider()
        style_provider.load_from_data(css)
        Gtk.StyleContext.add_provider_for_screen(
            Gdk.Screen.get_default(),
            style_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

        if config["tablist_top"]:
            self.vbox.reorder_child(self.ebox, 0)
            self.vbox.reorder_child(self.notebook, 1)
        else:
            self.vbox.reorder_child(self.notebook, 1)
            self.vbox.reorder_child(self.ebox, 2)

        # window fixup before we create tab
        self.window.resize(config["default_width"], config["default_height"])

        # iterate all tabs in our list and re-apply the background
        for idx, tab in enumerate(self.notebook):
            self.apply_tab_colors(tab)

        # repaint the tab bar
        self.update_tablist()

    def reload_config(self, arg=None):
        print("Reloading config...")
        # tries to reload config and re-apply what can be
        self.load_config()
        self.hook_wal_reloads()
        self.apply_config()

    def file_changed(monitor, file, other, unknown, event, self):
        if event == Gio.FileMonitorEvent.CHANGES_DONE_HINT:
           self.load_wal_palette()
           self.apply_config()

    def hook_wal_reloads(self):
        self.wal_file = Gio.File.new_for_path(os.path.expanduser(config['wal_palette']))
        print("Will monitor " + repr(self.wal_file.get_uri()))
        self.monitor = self.wal_file.monitor_file(Gio.FileMonitorFlags.NONE, None)
        self.monitor.connect("changed", self.file_changed, self)

    def load_wal_palette(self):
        # if specified in config file, we try to load the yml version of wal palette
        if ('wal_palette' not in config) or config['wal_palette'] == '':
            print("No wal_palette specified in config. Skipping")
            return

        try:
            with open(os.path.expanduser(config['wal_palette'])) as f:
                mypal = yaml.load(f, Loader=yaml.FullLoader)
                # special category contains foreground and background
                bgcol  = mypal['special']['background']
                fgcol  = mypal['special']['foreground']
                curcol = mypal['special']['cursor']

                src_cols = mypal['colors']
                colors = []
                for n in range(0, 16):
                      colors.append(src_cols['color' + str(n)])

                # that's all there's to it, really. Now we apply those
                tab_bg = brighten(bgcol, 1.5)

                config['background_color']   = bgcol
                config['bg_tint_color']      = bgcol
                config['foreground_color']   = fgcol

                config['tablist_background'] = tab_bg
                config['tab_color_bg'] = tab_bg
                config['tab_color_bg_selected'] = brighten(tab_bg, 1.5)
                config['tab_color_fg'] = fgcol
                config['tab_color_fg_selected'] = curcol

                config['tab_color_entangle'] = colors[1]
                config['tab_color_idx'] = colors[2]

                for n in range(0,8):
                      config['col_' + str(n)] = colors[n]

                # and at last, the palette
                config['palette'] = ':'.join(colors)

                print("Loaded wal colors")
        except Exception as e:
            exc_info = sys.exc_info()
            traceback.print_exception(*exc_info)
            print("Cannot load/apply wal colors: %s!" % repr(e))

if __name__ == '__main__':
    term = MyPixels()
    term.run()
